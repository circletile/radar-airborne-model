% name:     Airborne Radar Model - Compliance & Diagnostics Module
% matver:   R2023b
% summary:  Provides compliance report and diagnostic information for UAVRadarModel_NoSyms class objects.
%           This function/model is part of university coursework.
% author:   Chris Upchurch (chrisu@ucf.edu)

function compliance_diag_check
    % Enable debugger if necessary (next line commented out = debugger OFF)
    dbstop if error

    % Debug specific class methods when necessary
    % dbstop in UAVRadarModel_NoSyms.m at UAVRadarModel_NoSyms.doppler_case3_center_minus
    % dbstop local_debug_hold

    u = symunit;

    working_model_example = UAVRadarModel_NoSyms( ...
        'simultaneous', ...
        tx_freq = 90 * u.GHz, ...
        ant_altitude = 5 * u.km, ...
        ant_bs_grazing_ang_mid = 5 * u.deg, ...
        ant_dim_elev = 0.5 * u.m, ...
        ant_dim_azim = 0.5 * u.m, ...
        ant_spin_rate = 100 * u.rpm, ...
        ant_azim_fwd_look_half_angle = 45 * u.deg, ...
        tx_power = 500 * u.W, ...
        tx_pulse_width = 0.1 * u.usec, ...
        tx_prf = 100 * u.kHz, ...
        t_fa = 60 * u.sec, ...
        scan_qty_on_tgt_intent = 4, ...
        tx_pcr = 1); % not implemented; always use value of 1

    % Convenience alias
    model0 = working_model_example;

    disp_answers_from_cells(model0.dump_diagnostics(), 'DIAG');
    disp_answers_from_cells(model0.dump_eval_outputs(), 'EVAL');
    disp_answers_from_cells(model0.dump_doppler_diags(), 'DPLR');

    fprintf('\n\n');
    fprintf('===================\n');
    fprintf('Requirements Check\n');
    fprintf('===================\n');
    disp(model0.requirements_check);

    fprintf('============\n');
    fprintf('Goals Check\n');
    fprintf('============\n');
    disp(model0.goals_check);

    local_debug_hold();
end

function local_debug_hold()
    disp('debug hold');
end

function disp_answers_from_cells(answers, dataset)

    longest_field = 0;
    for i = 1:size(answers, 1)
        if isempty(answers{i, 1}) == false
            if strlength(answers{i, 1}) > longest_field
                longest_field = strlength(answers{i, 1});
            end
        end
    end

    fprintf('\n\n');
    fprintf('=============================\n');
    fprintf('%s %s %s\n', 'Evaluation Form', dataset, 'Outputs');
    fprintf('=============================\n');
    fprintf('%s%s\t%12s\t%12s\n', ...
        "Label", ...
        repmat(' ', 1, max([0, (longest_field - strlength("Label"))])), ...
        "Value", ...
    "Units");
    for i = 1:size(answers, 1)
        if isempty(answers{i, 1}) == false
            if startsWith(answers{i, 3}, 'db', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'bit', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'ratio', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'bool', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'prob', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'pct', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'kHz', 'IgnoreCase', true) || ...
                    startsWith(answers{i, 3}, 'pulse', 'IgnoreCase', true)
                fprintf('%s%s\t%12f\t%12s\n', ...
                    answers{i, 1}, ...
                    repmat(' ', 1, max([0, (longest_field - strlength(answers{i, 1}))])), ...
                    answers{i, 2}, ...
                    answers{i, 3});
            else
                fprintf('%s%s\t%12E\t%12s\n', ...
                    answers{i, 1}, ...
                    repmat(' ', 1, max([0, (longest_field - strlength(answers{i, 1}))])), ...
                    answers{i, 2}, ...
                    answers{i, 3});
            end
        end
    end
end
